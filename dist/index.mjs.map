{"version":3,"sources":["../src/class/main/Setup.ts","../src/functions/createAppCall.ts","../src/class/source/app/users/listUsers.ts","../src/class/source/app/users/userDetails.ts","../src/class/source/app/users/userDetails_externalId.ts","../src/class/source/app/users/createUser.ts","../src/class/source/app/users/updateUser.ts","../src/class/source/app/users/deleteUser.ts","../src/class/main/Application.ts","../src/class/source/client/account/accountDetails.ts","../src/class/source/client/account/2faEnable.ts","../src/class/source/client/account/2faDisable.ts","../src/class/source/client/account/updateEmail.ts","../src/class/source/client/account/updatePassword.ts","../src/class/source/client/account/createApiKey.ts","../src/class/source/client/account/deleteApiKey.ts","../src/class/source/client/account/listApiKeys.ts","../src/class/source/client/servers/listServers.ts","../src/class/source/client/servers/showPermissions.ts","../src/class/source/client/servers/files/listFiles.ts","../src/class/source/client/servers/files/getFileContent.ts","../src/class/source/client/servers/files/downloadFile.ts","../src/class/source/client/servers/files/renameFile.ts","../src/class/source/client/servers/files/copyFile.ts","../src/class/source/client/servers/files/writeFile.ts","../src/class/source/client/servers/files/compressFile.ts","../src/class/source/client/servers/files/decompressFile.ts","../src/class/source/client/servers/files/deleteFile.ts","../src/class/source/client/servers/files/createFolder.ts","../src/class/source/client/servers/files/uploadFile.ts","../src/class/main/Client.ts","../src/index.ts"],"sourcesContent":["/**\n * The `Setup` class provides a way to configure the panel URL globally.\n * Users can set their panel URL once and use it across multiple API calls without needing to specify it repeatedly.\n *\n * Usage:\n * ```ts\n * Setup.setPanel(\"https://panel.example.com\");\n * const panel = Setup.getPanel();\n * ```\n */\nexport default class Setup {\n    private static panelUrl: string;\n\n    /**\n     * Sets the global panel URL for API requests.\n     * @param {string} url - The URL of the Pterodactyl panel.\n     */\n    public static setPanel(url: string): void {\n        this.panelUrl = url;\n    }\n\n    /**\n     * Retrieves the globally set panel URL.\n     * @returns {string} The panel URL.\n     */\n    public static getPanel(): string {\n        if (!this.panelUrl) {\n            throw new Error(\"Panel URL is not set. Use `Setup.setPanel(url)` before making requests.\");\n        }\n        return this.panelUrl;\n    }\n}\n","import axios from \"axios\";\n\n/**\n * Creates an API Call to the Application API of your Pterodactyl panel.\n *\n * @param {Object} options - API call options.\n * @param {string} options.panel - Your panel's URL.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.endpoint - The API endpoint to call.\n * @param {\"GET\" | \"DELETE\" | \"POST\" | \"PATCH\" | \"PUT\"} options.method - HTTP method.\n * @param {any} [options.body] - Request body (for POST and PATCH requests).\n * @returns {Promise<any>} - The data fetched from the API.\n *\n * @throws {Error} - Throws an error if the API request fails.\n *\n * @example\n * (async () => {\n *     try {\n *         const data = await ApplicationAPICall({\n *             panel: \"https://panel.example.com\",\n *             apiKey: \"your-api-key\",\n *             endpoint: \"users\",\n *             method: \"GET\"\n *         });\n *         console.log(\"API Response:\", data);\n *     } catch (error) {\n *         console.error(\"Error:\", error);\n *     }\n * })();\n */\nexport default async function ApplicationAPICall(options: {\n    panel: string;\n    apiKey: string;\n    endpoint: string;\n    method: \"GET\" | \"DELETE\" | \"POST\" | \"PATCH\" | \"PUT\";\n    body?: any;\n}): Promise<any> {\n    const url = `${options.panel}/api/application/${options.endpoint}`;\n    const headers = {\n        'Accept': \"application/json\",\n        'Content-Type': \"application/json\",\n        'Authorization': `Bearer ${options.apiKey}`\n    };\n\n    let body: string | undefined = undefined;\n\n    if (options.body && options.method !== \"GET\" && options.method !== \"DELETE\") {\n        body = typeof options.body === \"string\" ? options.body : JSON.stringify(options.body);\n    }\n\n    try {\n        if (options.method === \"PATCH\") {\n            const response = await axios.patch(url, options.body, { headers });\n            return response.data;\n        } else {\n            const response = await fetch(url, {\n                method: options.method,\n                headers,\n                body\n            });\n\n            if (!response.ok) {\n                throw new Error(`API call failed with status ${response.status}: ${await response.text()}`);\n            }\n\n            return await response.json();\n        }\n    } catch (error) {\n        throw new Error(`Error in API call: ${error instanceof Error ? error.message : String(error)}`);\n    }\n}\n","import ApplicationAPICall from \"../../../../functions/createAppCall\";\n\n/**\n * Retrieves a list of users from the Pterodactyl panel API, with optional filters and sorting.\n * This function makes a `GET` request and includes the request body if required.\n *\n * @param {Object} options - Configuration options for the API call.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {boolean} [options.showLinkedServers=false] - Whether to include linked servers in the response.\n * @param {Object} [options.filters] - Filters to apply when retrieving users.\n * @param {string} [options.filters.email] - Filter users by their email address.\n * @param {string} [options.filters.uuid] - Filter users by their UUID.\n * @param {string} [options.filters.username] - Filter users by their username.\n * @param {string} [options.filters.external_id] - Filter users by their external ID.\n * @param {Object} [options.sortBy] - Sorting preferences for the response.\n * @param {boolean} [options.sortBy.id=false] - Sort users by ID.\n * @param {boolean} [options.sortBy.uuid=false] - Sort users by UUID.\n * @returns {Promise<any>} - A Promise resolving to the API response.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\n\nexport default async function listUsers(options: { \n    apiKey: string, \n    panel: string, \n    showLinkedServers?: boolean, \n    filters?: { \n        email?: string, \n        uuid?: string, \n        username?: string, \n        external_id?: string\n    },\n    sortBy?: {\n        id?: boolean,\n        uuid?: boolean\n    }\n}): Promise<any> {\n    const body = {\n        servers: options.showLinkedServers ?? false,\n        filters: {\n            email: options.filters?.email ?? null,\n            uuid: options.filters?.uuid ?? null,\n            username: options.filters?.username ?? null,\n            external_id: options.filters?.external_id ?? null\n        },\n        sortBy: {\n            id: options.sortBy?.id ?? false,\n            uuid: options.sortBy?.uuid ?? false\n        }\n    };\n\n    return ApplicationAPICall({\n        panel: options.panel,\n        apiKey: options.apiKey,\n        endpoint: \"users\",\n        method: \"GET\",\n        body: JSON.stringify(body) \n    });\n}\n","import ApplicationAPICall from \"../../../../functions/createAppCall\";\n\n/**\n * Retrieves details of a specific user from the Pterodactyl panel API.\n * Optionally, it can include the list of servers associated with the user.\n *\n * @param {Object} options - Configuration options for the API call.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {string} options.user_id - The unique ID of the user to retrieve.\n * @param {boolean} [options.listServers=false] - Whether to include the user's linked servers in the response.\n * @returns {Promise<any>} - A Promise resolving to the API response.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function userDetails(options: { \n    apiKey: string, \n    panel: string, \n    user_id: string, \n    listServers?: boolean \n}): Promise<any> {\n    return ApplicationAPICall({\n        panel: options.panel,\n        apiKey: options.apiKey,\n        endpoint: `user/${options.user_id}`,\n        method: \"GET\",\n        body: JSON.stringify({ servers: options.listServers ?? false }) // Ensuring body is a string\n    });\n}\n","import ApplicationAPICall from \"../../../../functions/createAppCall\";\n\n/**\n * Retrieves user details from the Pterodactyl panel API using an external identifier.\n * Optionally, it can include the list of servers associated with the user.\n *\n * @param {Object} options - Configuration options for the API call.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {string} options.external_id - The external identifier of the user to retrieve.\n * @param {boolean} [options.listServers=false] - Whether to include the user's linked servers in the response.\n * @returns {Promise<any>} - A Promise resolving to the API response.\n *\n * @throws {Error} - Throws an error if the API request fails.\n *\n * @example\n * (async () => {\n *     try {\n *         const userData = await userDetailsByExternalIdentifier({\n *             panel: \"https://panel.example.com\",\n *             apiKey: \"your-api-key\",\n *             external_id: \"external-user-1234\",\n *             listServers: true\n *         });\n *         console.log(\"User Details:\", userData);\n *     } catch (error) {\n *         console.error(\"Error:\", error);\n *     }\n * })();\n */\nexport default async function userDetailsByExternalIdentifier(options: { \n    apiKey: string, \n    panel: string, \n    external_id: string, \n    listServers?: boolean \n}): Promise<any> {\n    return ApplicationAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"GET\",\n        endpoint: `users/external/${options.external_id}`,\n        body: JSON.stringify({ servers: options.listServers ?? false }) // Ensuring body is a JSON string\n    });\n}\n","import ApplicationAPICall from \"../../../../functions/createAppCall\";\n\n/**\n * Creates a new user in the Pterodactyl panel using the provided user details.\n * If `first_name` or `last_name` are not provided, they default to `\"Pterodactyl\"` and `\"User\"`, respectively.\n *\n * @param {Object} options - Configuration options for the API call.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {Object} options.user_details - The details of the user to be created.\n * @param {string} options.user_details.email - The email address of the user.\n * @param {string} options.user_details.username - The username of the user.\n * @param {string} [options.user_details.first_name=\"Pterodactyl\"] - The first name of the user (optional).\n * @param {string} [options.user_details.last_name=\"User\"] - The last name of the user (optional).\n * @returns {Promise<any>} - A Promise resolving to the API response.\n *\n * @throws {Error} - Throws an error if the API request fails.\n *\n * @example\n * (async () => {\n *     try {\n *         const newUser = await createUser({\n *             panel: \"https://panel.example.com\",\n *             apiKey: \"your-api-key\",\n *             user_details: {\n *                 email: \"newuser@example.com\",\n *                 username: \"newUser123\",\n *                 first_name: \"John\",\n *                 last_name: \"Doe\"\n *             }\n *         });\n *         console.log(\"User Created:\", newUser);\n *     } catch (error) {\n *         console.error(\"Error creating user:\", error);\n *     }\n * })();\n */\nexport default async function createUser(options: {\n    apiKey: string;\n    panel: string;\n    user_details: {\n        email: string;\n        username: string;\n        first_name?: string;\n        last_name?: string;\n    };\n}): Promise<any> {\n    return ApplicationAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"POST\",\n        endpoint: \"users\",\n        body: JSON.stringify({\n            email: options.user_details.email,\n            username: options.user_details.username,\n            first_name: options.user_details.first_name ?? \"Pterodactyl\",\n            last_name: options.user_details.last_name ?? \"User\"\n        }) \n    });\n}\n","import ApplicationAPICall from \"../../../../functions/createAppCall\";\n\n/**\n * Updates a user's details on the Pterodactyl panel.\n * You can update the user's email, username, first name, last name, language, or password.\n *\n * @param {Object} options - Configuration options for the API call.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {number} options.user_id - The ID of the user to update.\n * @param {Object} options.data - The data to update for the user.\n * @param {string} [options.data.email] - The new email of the user (optional).\n * @param {string} [options.data.username] - The new username of the user (optional).\n * @param {string} [options.data.first_name] - The new first name of the user (optional).\n * @param {string} [options.data.last_name] - The new last name of the user (optional).\n * @param {string} [options.data.language] - The new language preference for the user (optional).\n * @param {string} [options.data.password] - The new password for the user (optional).\n * @returns {Promise<any>} - A Promise resolving to the API response.\n *\n * @throws {Error} - Throws an error if the API request fails.\n *\n * @example\n * (async () => {\n *     try {\n *         const updatedUser = await updateUser({\n *             panel: \"https://panel.example.com\",\n *             apiKey: \"your-api-key\",\n *             user_id: 1234,\n *             data: {\n *                 email: \"newemail@example.com\",\n *                 username: \"UpdatedUsername\",\n *                 first_name: \"John\",\n *                 last_name: \"Doe\"\n *             }\n *         });\n *         console.log(\"User Updated:\", updatedUser);\n *     } catch (error) {\n *         console.error(\"Error updating user:\", error);\n *     }\n * })();\n */\nexport default async function updateUser(options: {\n    apiKey: string;\n    panel: string;\n    user_id: number;\n    data: {\n        email?: string;\n        username?: string;\n        first_name?: string;\n        last_name?: string;\n        language?: string;\n        password?: string;\n    };\n}): Promise<any> {\n    return ApplicationAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        endpoint: `users/${options.user_id}`, // Fixed endpoint (removed extra \"/\")\n        method: \"PATCH\",\n        body: JSON.stringify(options.data) // Ensured the body is stringified\n    });\n}","import ApplicationAPICall from \"../../../../functions/createAppCall\";\n\n/**\n * Deletes a user from the Pterodactyl panel using the given identifier.\n *\n * @param {Object} options - Configuration options for the API call.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {number} options.identifier - The unique identifier (ID) of the user to be deleted.\n * @returns {Promise<any>} - A Promise resolving to the API response.\n *\n * @throws {Error} - Throws an error if the API request fails.\n *\n * @example\n * (async () => {\n *     try {\n *         const response = await deleteUser({\n *             panel: \"https://panel.example.com\",\n *             apiKey: \"your-api-key\",\n *             identifier: 1234\n *         });\n *         console.log(\"User Deleted:\", response);\n *     } catch (error) {\n *         console.error(\"Error deleting user:\", error);\n *     }\n * })();\n */\nexport default async function deleteUser(options: { \n    apiKey: string; \n    panel: string; \n    identifier: number; \n}): Promise<any> {\n    return ApplicationAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"DELETE\",\n        endpoint: `users/${options.identifier}`\n    });\n}\n","import Setup from \"./Setup\";\n\n// Import user functions\nimport listUsers from \"../source/app/users/listUsers\";\nimport userDetails from \"../source/app/users/userDetails\";\nimport userDetails_externalId from \"../source/app/users/userDetails_externalId\";\nimport createUser from \"../source/app/users/createUser\";\nimport updateUser from \"../source/app/users/updateUser\";\nimport deleteUser from \"../source/app/users/deleteUser\";\n\n/**\n * The `Application` class provides an interface for interacting with the Pterodactyl Application API.\n * It allows full control over the panel, including user, server, and node management.\n *\n * Usage:\n * ```ts\n * const app = new Application(\"YOUR_API_KEY\");\n * const users = await app.users.list();\n * ```\n */\nexport default class Application {\n    private apiKey: string;\n    private panel: string;\n\n    constructor(apiKey: string) {\n        this.apiKey = apiKey;\n        this.panel = Setup.getPanel();\n    }\n\n    /** User Management */\n    public users = {\n        list: () => listUsers({ apiKey: this.apiKey, panel: this.panel }),\n        getDetails: (user_id: string) => userDetails({ apiKey: this.apiKey, panel: this.panel, user_id }),\n        getDetailsByExternalId: (external_id: string) => userDetails_externalId({ apiKey: this.apiKey, panel: this.panel, external_id }),\n        create: (user_details: { email: string; username: string; first_name?: string; last_name?: string }) => \n            createUser({ apiKey: this.apiKey, panel: this.panel, user_details }),        \n        update: (user_id: string, user_data: any) => \n            updateUser({ apiKey: this.apiKey, panel: this.panel, user_id: parseInt(user_id), data: user_data }),        \n        delete: (user_id: string) => deleteUser({ apiKey: this.apiKey, panel: this.panel, identifier: parseInt(user_id) }),\n    };\n}\n","import ClientAPICall from \"../../../../functions/createAppCall\";\n\n/**\n * Retrieves account details for the authenticated user.\n * \n * @param {Object} options - API call options.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @returns {Promise<any>} - API response containing account details.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function accountDetails(options: { \n    apiKey: string; \n    panel: string; \n}): Promise<any> {\n    return ClientAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"GET\",\n        endpoint: \"account\"\n    });\n}\n","import ClientAPICall from \"../../../../functions/createAppCall\";\n\n/**\n * Enables Two-Factor Authentication (2FA) for the authenticated user.\n * \n * @param {Object} options - API call options.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {string[]} options.codes - The TOTP authentication codes for verification.\n * @returns {Promise<any>} - API response confirming 2FA activation.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function twoFactorEnable(options: { \n    apiKey: string; \n    panel: string; \n    codes: string[];\n}): Promise<any> {\n    return ClientAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"POST\",\n        endpoint: \"account/two-factor\",\n        body: { codes: options.codes }\n    });\n}\n","import ClientAPICall from \"../../../../functions/createAppCall\";\n\n/**\n * Disables Two-Factor Authentication (2FA) for the authenticated user.\n * \n * @param {Object} options - API call options.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {string[]} options.tokens - An array of 2FA recovery codes to confirm disabling.\n * @returns {Promise<any>} - API response confirming 2FA deactivation.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function twoFactorDisable(options: { \n    apiKey: string; \n    panel: string; \n    tokens: string[];\n}): Promise<any> {\n    return ClientAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"DELETE\",\n        endpoint: \"account/two-factor\",\n        body: { tokens: options.tokens }\n    });\n}\n","import ClientAPICall from \"../../../../functions/createAppCall\";\n\n/**\n * Updates the email address of the authenticated user.\n * \n * @param {Object} options - API call options.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {string} options.email - The new email address.\n * @param {string} options.password - The current password (required for confirmation).\n * @returns {Promise<any>} - API response confirming email update.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function updateEmail(options: { \n    apiKey: string; \n    panel: string; \n    email: string;\n    password: string;\n}): Promise<any> {\n    return ClientAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"PUT\",\n        endpoint: \"account/email\",\n        body: {\n            email: options.email,\n            password: options.password\n        }\n    });\n}\n","import ClientAPICall from \"../../../../functions/createAppCall\";\n\n/**\n * Updates the password of the authenticated user.\n * \n * @param {Object} options - API call options.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {string} options.current_password - The current password for confirmation.\n * @param {string} options.new_password - The new password to set.\n * @returns {Promise<any>} - API response confirming password update.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function updatePassword(options: { \n    apiKey: string; \n    panel: string; \n    current_password: string;\n    new_password: string;\n}): Promise<any> {\n    return ClientAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"PUT\",\n        endpoint: \"account/password\",\n        body: {\n            current_password: options.current_password,\n            password: options.new_password\n        }\n    });\n}\n","import ClientAPICall from \"../../../../functions/createAppCall\";\n\n/**\n * Creates a new API key for the authenticated user.\n * \n * @param {Object} options - API call options.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {string} options.description - A description for the API key.\n * @param {string[]} options.allowed_ips - An array of allowed IPs (empty for unrestricted access).\n * @returns {Promise<any>} - API response containing the newly created API key.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function createApiKey(options: { \n    apiKey: string; \n    panel: string; \n    description: string;\n    allowed_ips: string[];\n}): Promise<any> {\n    return ClientAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"POST\",\n        endpoint: \"account/api-keys\",\n        body: {\n            description: options.description,\n            allowed_ips: options.allowed_ips\n        }\n    });\n}\n","import ClientAPICall from \"../../../../functions/createAppCall\";\n\n/**\n * Deletes an API key for the authenticated user.\n * \n * @param {Object} options - API call options.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {string} options.key_id - The unique identifier of the API key to delete.\n * @returns {Promise<any>} - API response confirming deletion.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function deleteApiKey(options: { \n    apiKey: string; \n    panel: string; \n    key_id: string;\n}): Promise<any> {\n    return ClientAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"DELETE\",\n        endpoint: `account/api-keys/${options.key_id}`\n    });\n}\n","import ClientAPICall from \"../../../../functions/createAppCall\";\n\n/**\n * Retrieves a list of all API keys for the authenticated user.\n * \n * @param {Object} options - API call options.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @returns {Promise<any>} - API response containing all API keys.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function listApiKeys(options: { \n    apiKey: string; \n    panel: string; \n}): Promise<any> {\n    return ClientAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"GET\",\n        endpoint: \"account/api-keys\"\n    });\n}\n","import ClientAPICall from \"../../../../functions/createAppCall\";\n\n/**\n * Retrieves a list of all servers the authenticated user has access to.\n *\n * @param {Object} options - API call options.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @returns {Promise<any>} - API response containing the list of servers.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function listServers(options: { \n    apiKey: string; \n    panel: string; \n}): Promise<any> {\n    return ClientAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"GET\",\n        endpoint: \"servers\"\n    });\n}\n","import ClientAPICall from \"../../../../functions/createAppCall\";\n\n/**\n * Retrieves the permissions the authenticated user has for a specific server.\n *\n * @param {Object} options - API call options.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {string} options.server_id - The ID of the server.\n * @returns {Promise<any>} - API response containing the list of permissions for the user.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function showPermissions(options: { \n    apiKey: string; \n    panel: string; \n    server_id: string;\n}): Promise<any> {\n    return ClientAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"GET\",\n        endpoint: `servers/${options.server_id}/permissions`\n    });\n}\n","import ClientAPICall from \"../../../../../functions/createAppCall\";\n\n/**\n * Retrieves a list of all files and directories for a specific server.\n *\n * @param {Object} options - API call options.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {string} options.server_id - The ID of the server.\n * @param {string} [options.directory] - The directory path to list files from (optional).\n * @returns {Promise<any>} - API response containing the list of files.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function listFiles(options: { \n    apiKey: string; \n    panel: string; \n    server_id: string;\n    directory?: string;\n}): Promise<any> {\n    return ClientAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"GET\",\n        endpoint: `servers/${options.server_id}/files/list${options.directory ? `?directory=${options.directory}` : \"\"}`\n    });\n}\n","import ClientAPICall from \"../../../../../functions/createAppCall\";\n\n/**\n * Retrieves the content of a specific file on a server.\n *\n * @param {Object} options - API call options.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {string} options.server_id - The ID of the server.\n * @param {string} options.file_path - The path of the file to retrieve.\n * @returns {Promise<any>} - API response containing file content.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function getFileContent(options: { \n    apiKey: string; \n    panel: string; \n    server_id: string;\n    file_path: string;\n}): Promise<any> {\n    return ClientAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"GET\",\n        endpoint: `servers/${options.server_id}/files/contents?file=${encodeURIComponent(options.file_path)}`\n    });\n}\n","import ClientAPICall from \"../../../../../functions/createAppCall\";\n\n/**\n * Retrieves a download link for a file.\n *\n * @param {Object} options - API call options.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {string} options.server_id - The ID of the server.\n * @param {string} options.file_path - The path of the file to download.\n * @returns {Promise<any>} - API response containing the download URL.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function downloadFile(options: { \n    apiKey: string; \n    panel: string; \n    server_id: string;\n    file_path: string;\n}): Promise<any> {\n    return ClientAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"GET\",\n        endpoint: `servers/${options.server_id}/files/download?file=${encodeURIComponent(options.file_path)}`\n    });\n}\n","import ClientAPICall from \"../../../../../functions/createAppCall\";\n\n/**\n * Renames a file or folder on a server.\n *\n * @param {Object} options - API call options.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {string} options.server_id - The ID of the server.\n * @param {Object[]} options.files - An array of objects containing old and new file names.\n * @returns {Promise<any>} - API response confirming file/folder rename.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function renameFile(options: { \n    apiKey: string; \n    panel: string; \n    server_id: string;\n    files: { from: string; to: string }[];\n}): Promise<any> {\n    return ClientAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"PUT\",\n        endpoint: `servers/${options.server_id}/files/rename`,\n        body: JSON.stringify({ files: options.files })\n    });\n}\n","import ClientAPICall from \"../../../../../functions/createAppCall\";\n\n/**\n * Copies a file to a new location on the server.\n *\n * @param {Object} options - API call options.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {string} options.server_id - The ID of the server.\n * @param {string} options.file_path - The path of the file to copy.\n * @returns {Promise<any>} - API response confirming the file copy.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function copyFile(options: { \n    apiKey: string; \n    panel: string; \n    server_id: string;\n    file_path: string;\n}): Promise<any> {\n    return ClientAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"POST\",\n        endpoint: `servers/${options.server_id}/files/copy`,\n        body: JSON.stringify({ location: options.file_path })\n    });\n}\n","import ClientAPICall from \"../../../../../functions/createAppCall\";\n\n/**\n * Writes content to a file on a server.\n *\n * @param {Object} options - API call options.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {string} options.server_id - The ID of the server.\n * @param {string} options.file_path - The path of the file to write.\n * @param {string} options.content - The content to write to the file.\n * @returns {Promise<any>} - API response confirming file write operation.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function writeFile(options: { \n    apiKey: string; \n    panel: string; \n    server_id: string;\n    file_path: string;\n    content: string;\n}): Promise<any> {\n    return ClientAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"POST\",\n        endpoint: `servers/${options.server_id}/files/write`,\n        body: JSON.stringify({\n            file: options.file_path,\n            contents: options.content\n        })\n    });\n}\n","import ClientAPICall from \"../../../../../functions/createAppCall\";\n\n/**\n * Compresses files or directories on a server into a ZIP archive.\n *\n * @param {Object} options - API call options.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {string} options.server_id - The ID of the server.\n * @param {string[]} options.files - An array of files or directories to compress.\n * @returns {Promise<any>} - API response confirming compression.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function compressFile(options: { \n    apiKey: string; \n    panel: string; \n    server_id: string;\n    files: string[];\n}): Promise<any> {\n    return ClientAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"POST\",\n        endpoint: `servers/${options.server_id}/files/compress`,\n        body: JSON.stringify({ files: options.files })\n    });\n}\n","import ClientAPICall from \"../../../../../functions/createAppCall\";\n\n/**\n * Decompresses a ZIP file on a server.\n *\n * @param {Object} options - API call options.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {string} options.server_id - The ID of the server.\n * @param {string} options.file_path - The path of the ZIP file to decompress.\n * @returns {Promise<any>} - API response confirming decompression.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function decompressFile(options: { \n    apiKey: string; \n    panel: string; \n    server_id: string;\n    file_path: string;\n}): Promise<any> {\n    return ClientAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"POST\",\n        endpoint: `servers/${options.server_id}/files/decompress`,\n        body: JSON.stringify({ file: options.file_path })\n    });\n}\n","import ClientAPICall from \"../../../../../functions/createAppCall\";\n\n/**\n * Deletes a file or folder on a server.\n *\n * @param {Object} options - API call options.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {string} options.server_id - The ID of the server.\n * @param {string[]} options.files - An array of files or folders to delete.\n * @returns {Promise<any>} - API response confirming file deletion.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function deleteFile(options: { \n    apiKey: string; \n    panel: string; \n    server_id: string;\n    files: string[];\n}): Promise<any> {\n    return ClientAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"POST\",\n        endpoint: `servers/${options.server_id}/files/delete`,\n        body: JSON.stringify({ files: options.files })\n    });\n}\n","import ClientAPICall from \"../../../../../functions/createAppCall\";\n\n/**\n * Creates a new folder on a server.\n *\n * @param {Object} options - API call options.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {string} options.server_id - The ID of the server.\n * @param {string} options.folder_path - The path of the folder to create.\n * @returns {Promise<any>} - API response confirming folder creation.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function createFolder(options: { \n    apiKey: string; \n    panel: string; \n    server_id: string;\n    folder_path: string;\n}): Promise<any> {\n    return ClientAPICall({\n        apiKey: options.apiKey,\n        panel: options.panel,\n        method: \"POST\",\n        endpoint: `servers/${options.server_id}/files/create-folder`,\n        body: JSON.stringify({ name: options.folder_path })\n    });\n}\n","import axios from \"axios\";\n\n/**\n * Uploads a file to a server.\n *\n * @param {Object} options - API call options.\n * @param {string} options.apiKey - The API key for authentication.\n * @param {string} options.panel - The base URL of the Pterodactyl panel.\n * @param {string} options.server_id - The ID of the server.\n * @param {FormData} options.file_data - The file data to upload.\n * @returns {Promise<any>} - API response confirming file upload.\n *\n * @throws {Error} - Throws an error if the API request fails.\n */\nexport default async function uploadFile(options: { \n    apiKey: string; \n    panel: string; \n    server_id: string;\n    file_data: FormData;\n}): Promise<any> {\n    return axios.post(`${options.panel}/api/client/servers/${options.server_id}/files/upload`, options.file_data, {\n        headers: {\n            \"Authorization\": `Bearer ${options.apiKey}`,\n            \"Content-Type\": \"multipart/form-data\"\n        }\n    });\n}\n","import Setup from \"./Setup\";\n\n// Import account functions\nimport accountDetails from \"../source/client/account/accountDetails\";\nimport twoFactorEnable from \"../source/client/account/2faEnable\";\nimport twoFactorDisable from \"../source/client/account/2faDisable\";\nimport updateEmail from \"../source/client/account/updateEmail\";\nimport updatePassword from \"../source/client/account/updatePassword\";\nimport createApiKey from \"../source/client/account/createApiKey\";\nimport deleteApiKey from \"../source/client/account/deleteApiKey\";\nimport listApiKeys from \"../source/client/account/listApiKeys\";\n\n// Import server functions\nimport listServers from \"../source/client/servers/listServers\";\nimport showPermissions from \"../source/client/servers/showPermissions\";\n\n// Import file management functions\nimport listFiles from \"../source/client/servers/files/listFiles\";\nimport getFileContent from \"../source/client/servers/files/getFileContent\";\nimport downloadFile from \"../source/client/servers/files/downloadFile\";\nimport renameFile from \"../source/client/servers/files/renameFile\";\nimport copyFile from \"../source/client/servers/files/copyFile\";\nimport writeFile from \"../source/client/servers/files/writeFile\";\nimport compressFile from \"../source/client/servers/files/compressFile\";\nimport decompressFile from \"../source/client/servers/files/decompressFile\";\nimport deleteFile from \"../source/client/servers/files/deleteFile\";\nimport createFolder from \"../source/client/servers/files/createFolder\";\nimport uploadFile from \"../source/client/servers/files/uploadFile\";\n\n/**\n * The `Client` class provides an interface for interacting with the Pterodactyl Client API.\n * It contains multiple functions allowing users to manage accounts, servers, files, networks, schedules, and more.\n *\n * Usage:\n * ```ts\n * const client = new Client(\"YOUR_API_KEY\");\n * const accountDetails = await client.account.getDetails();\n * ```\n */\nexport default class Client {\n    private apiKey: string;\n    private panel: string;\n\n    constructor(apiKey: string) {\n        this.apiKey = apiKey;\n        this.panel = Setup.getPanel();\n    }\n\n    /** Account Management */\n    public account = {\n        getDetails: () => accountDetails({ apiKey: this.apiKey, panel: this.panel }),\n        enable2FA: (codes: string[]) => twoFactorEnable({ apiKey: this.apiKey, panel: this.panel, codes }),\n        disable2FA: (tokens: string[]) => twoFactorDisable({ apiKey: this.apiKey, panel: this.panel, tokens }),\n        updateEmail: (email: string, password: string) => updateEmail({ apiKey: this.apiKey, panel: this.panel, email, password }),\n        updatePassword: (current_password: string, new_password: string) => updatePassword({ apiKey: this.apiKey, panel: this.panel, current_password, new_password }),\n        createApiKey: (description: string, allowed_ips: string[]) => createApiKey({ apiKey: this.apiKey, panel: this.panel, description, allowed_ips }),\n        deleteApiKey: (key_id: string) => deleteApiKey({ apiKey: this.apiKey, panel: this.panel, key_id }),\n        listApiKeys: () => listApiKeys({ apiKey: this.apiKey, panel: this.panel })\n    };\n\n    /** Server Management */\n    public servers = {\n        list: () => listServers({ apiKey: this.apiKey, panel: this.panel }),\n        showPermissions: (server_id: string) => showPermissions({ apiKey: this.apiKey, panel: this.panel, server_id })\n    };\n\n    /** File Management */\n    public files = {\n        list: (server_id: string) => listFiles({ apiKey: this.apiKey, panel: this.panel, server_id }),\n        getContent: (server_id: string, file_path: string) => getFileContent({ apiKey: this.apiKey, panel: this.panel, server_id, file_path }),\n        download: (server_id: string, file_path: string) => downloadFile({ apiKey: this.apiKey, panel: this.panel, server_id, file_path }),\n        rename: (server_id: string, from: string, to: string) => renameFile({ apiKey: this.apiKey, panel: this.panel, server_id, files: [{ from, to }] }),\n        copy: (server_id: string, file_path: string) => copyFile({ apiKey: this.apiKey, panel: this.panel, server_id, file_path }),\n        write: (server_id: string, file_path: string, content: string) => writeFile({ apiKey: this.apiKey, panel: this.panel, server_id, file_path, content }),\n        compress: (server_id: string, files: string[]) => compressFile({ apiKey: this.apiKey, panel: this.panel, server_id, files }),\n        decompress: (server_id: string, file_path: string) => decompressFile({ apiKey: this.apiKey, panel: this.panel, server_id, file_path }),\n        delete: (server_id: string, files: string[]) => deleteFile({ apiKey: this.apiKey, panel: this.panel, server_id, files }),\n        createFolder: (server_id: string, folder_path: string) => createFolder({ apiKey: this.apiKey, panel: this.panel, server_id, folder_path }),\n        upload: (server_id: string, file_data: FormData) => uploadFile({ apiKey: this.apiKey, panel: this.panel, server_id, file_data })\n    };\n}","import Application from \"./class/main/Application\";\nimport Client from \"./class/main/Client\";\nimport Setup from \"./class/main/Setup\";\n\nexport default {\n    Application, Client, Setup\n}"],"mappings":"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","names":["axios"]}